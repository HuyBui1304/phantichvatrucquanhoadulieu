)
# f) Khôi phục lại cài đặt mặc định cho môi trường đồ họa.
par(mfrow=c(1,1))
# 2. Biểu đồ boxplot với các tùy chỉnh cho dữ liệu bảo hiểm
# a) Đọc tệp insurance.csv (từ thư mục chi phí y tế) vào R và lưu vào biến insurance.
# Kiểm tra dữ liệu đã được tải đúng chưa và kiểu dữ liệu của các biến có phù hợp không.
# Chuyển đổi các biến sex (giới tính), smoker (người hút thuốc) và region (khu vực) sang kiểu factor.
insurance <- read.csv('/Users/huy/Documents/phân tích và trực quan hoá dữ liệu/data/graphics - medical cost personal dataset/insurance.csv')
# Kiểm tra dữ liệu
str(insurance)
# Chuyển đổi
insurance$sex <- factor(insurance$sex)
insurance$smoker <- factor(insurance$smoker)
insurance$region <- factor(insurance$region)
# Kiểm tra dữ liệu
str(insurance)
# b) Tạo biểu đồ boxplot cho biến charges (chi phí) theo region (khu vực).
# Đổi tên các trục thành "Chi phí y tế" và "Khu vực".
boxplot(
charges ~ region,
data = insurance,
xlab="Region",
ylab="Medical charges"
)
# c) Thay đổi màu sắc của các 'hộp' (box) theo từng khu vực và thêm chú thích.
# c) Thay đổi màu sắc của các 'hộp' (box) theo từng khu vực và thêm chú thích.
# Sử dụng bảng màu viridis với 4 màu rời rạc.
boxplot(
charges ~ rigion,
data = insurance,
xlab = "Region"
ylab = "Medical charges",
boxplot(
charges ~ rigion,
data = insurance,
xlab = "Region",
ylab = "Medical charges",
col = region_colors
)
boxplot(
charges ~ region,
data = insurance,
xlab = "Region",
ylab = "Medical charges",
col = region_colors
)
# c) Thay đổi màu sắc của các 'hộp' (box) theo từng khu vực và thêm chú thích.
# Sử dụng bảng màu viridis với 4 màu rời rạc.
# Lưu ý: Bạn có thể giả định rằng gói viridis đã được cài đặt và tải khi nộp bài.
if(require(viridis)){
# tạo ra 4 màu từ bảng viridis
region_colors <- viridis(4, option = "D")
boxplot(
charges ~ region,
data = insurance,
xlab = "Region",
ylab = "Medical charges",
col = region_colors
)
}
boxplot(
charges ~ region,
data = insurance,
xlab = "Region",
ylab = "Medical charges",
col = region_colors
)
# d) Tạo chú thích (legend) ở góc trên bên phải của biểu đồ.
# Đặt tên các phần tử trong chú thích giống hệt tên các danh mục trong biểu đồ.
# Gợi ý: Bạn có thể sử dụng hàm levels() để lấy tên tự động.
# Đảm bảo màu sắc trong chú thích trùng khớp với màu sắc của các hộp.
# Khi nộp bài, chỉ cần cung cấp dòng mã tạo chú thích.
legend("topright",
legend = levels(insurance$region),
fill = region_colors,
title = "Region")
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANGUAGE='en')
getwd()
setwd('D:/R-Intro/R-Intro/')
?rgb
?min
# Example
max(iris$Sepal.Length)
min(iris$Sepal.Length)
# manually calculating ranges
max(iris$Sepal.Length) - min(iris$Sepal.Length)
max(iris$Sepal.Width) - min(iris$Sepal.Width)
max(iris$Petal.Width) - min(iris$Petal.Width)
max(iris$Petal.Length) - min(iris$Petal.Length)
max(iris$Petal.Width) - min(iris$Petal.Width)
# xây dựng hàm
myRange <- function(variable){
rangeValue <- max(variable) - min(variable);
return(rangeValue);
}
# xây dựng hàm
myRange <- function(variable){
rangeValue <- max(variable) - min(variable);
return(rangeValue);
}
# sử dụng hàm
myRange(iris$Sepal.Length)
}
rangeValue <- max(variable, na.rm=missingRemove) - min(variable, na.rm=missingRemove);
# bổ sung thêm điều kiện
myRange <- function(variable, missingRemove = TRUE){
rangeValue <- max(variable, na.rm=missingRemove) - min(variable, na.rm=missingRemove);
return(rangeValue);
}
newwV <- c(seq(1,20,4), NA)
newwV
myRange(newwV)
myRange(newwV, F)
myRange(newwV, T)
print("Error: không thể tính khoảng giá trị cho dữ liệu")
myRange(newwV, missingRmove = T)
myRange(newwV, missingRemove = T)
})
error = function((e){
tryCatch(
{
myRange(v)
},
error = function((e){
tryCatch(
{
myRange(v)
},
error = function((e){
tryCatch(
{
myRange(v)
},
error = function(e){
print("Error: không thể tính khoảng giá trị cho dữ liệu")
})
# Cách sử dụng lapply
lapply(iris[,1:4], myRange);
# Cách sử dụng lapply
lapply(iris[,1:4], myRange);
# Cách sử dụng lapply
lapply(iris[,1:4], myRange);
for (v in logicalVector(){
counter <- counter+1;
for (v in logicalVector(){
logicalVector <-c(T,F,T,T,F)
counter = 0
for (v in logicalVector(){
for (v in logicalVector){
if(v){
counter <- counter+1;
}
}
counter
if(logicalVector[i] ==T){
counter <- counter+1;
}
counter <-0;
for( i in 1: length(logicalVector)){
if(logicalVector[i] ==T){
counter <- counter+1;
}
}
counter
x <- 100
if(x%%2==0){
print(x," la so chan");
}else{
print(x, "la so le")
}
# thay đổi ngôn ngữ sang enlish
Sys.setlocale("LC_ALL", "English")
Sys.setenv(LANGUAGE="en")
water<-read.csv('/Users/huy/Documents/phân tích và trực quan hoá dữ liệu/Lab-01/data/graphics - water quality/water_potability.csv')
View(water)
str(water)
# xây dựng linear regression model
summary(longley)
str(longley)
# ma trận tương quan giữa các biến
cor(longley)
cor(longley$GNP, longley$Employed)
# xây model
model <-lm(GNP~Employed, data =longley)
model
model$coefficients
model$coefficients[[1]]
model$coefficients[[2]]
#Data Frame
model$model
# xay model 2 bien
model1 <- lm(GNP~Employed+Armed.Forces, data=longley)
summary(model1)
model1$model1
model1$model
model1$coefficients
model1$coefficients[[1]]
model1$coefficients[[2]]
boston
data(Boston)
library(MASS)
data(Boston)
str(Boston)
Boston <- Boston.dropna
summary(Boston)
# vẽ ma trận tương quan
pairs(Boston)
# tính ma trận tương quan
correlation <-cor(Boston)
print(correlation["medv",])
# plot biểu đồ phân tán giữa số phòng trung và giá trị
plot(Boston$rm, Boston$medv,
xlab = "số phòng trung bình (rm)",
ylab = "giá nha trung bình medv",
main="mối quan hệ giữa rm và nedv",
abline(lm(medv~rm, data = Boston), col="red"))
### LẤY ĐIỂM THỰC HÀNH
# 3. Biểu đồ cột cho dữ liệu Thế vận hội
# a) Đọc dữ liệu Tokyo 2021 từ thư mục olympic games và lưu vào biến games.
# b) Chuẩn bị biểu đồ cột hiển thị 10 quốc gia giành nhiều huy chương bạc nhất.
games <- read.csv('/Users/huy/Documents/phân tích và trực quan hoá dữ liệu/Lab-01/data/graphics - olympic games 2021/Tokyo 2021 dataset.csv')
games.head()
games <- read.csv('/Users/huy/Documents/phân tích và trực quan hoá dữ liệu/Lab-01/data/graphics - olympic games 2021/Tokyo 2021 dataset.csv')
games <- read.csv('/Users/huy/Documents/phân tích và trực quan hoá dữ liệu/Lab-01/data/graphics - olympic games 2021/Tokyo 2021 dataset.csv')
games.head()
head(games)
top10_silver <- games[order(games$Silver.Medal), ][1:10,]
barplot(top10_silver$Silver.Medal,
names.arg = top10_silver$Team.NOC,
las = 2,
col = 'darkblue',
main="top 10 quốc gia giành nhiều huy chương nhât",
xlab="quốc gia",
ylab="số huy chương bạc")
# Sắp xếp giảm dần và lấy 10 quốc gia đứng đầu
top10_silver <- games[order(-games$Silver.Medal), ][1:10,]
# Vẽ biểu đồ cột
barplot(top10_silver$Silver.Medal,
names.arg = top10_silver$Team.NOC,
las = 2,
col = 'darkblue',
main = "Top 10 quốc gia giành nhiều huy chương bạc nhất",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
silver10 <- games[order(-games$Silver.Medal), ][1:10,]
# Vẽ biểu đồ cột
barplot(silver10$Silver.Medal,
names.arg = silver10$Team.NOC,
las = 2,
col = 'darkblue',
main = "Top 10 quốc gia giành nhiều huy chương bạc nhất",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
barplot(games$Silver.Medal)
barplot(games$Silver.Medal,
las =2)
barplot(games$Silver.Medal,
las =2,
col = 'green',
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# c) Sử dụng hàm barplot() để vẽ biểu đồ cột cho biến Silver.Medal.
barplot(games$Silver.Medal,
names.arg = games$Team.NOC,
las = 2,
col = 'green',
main = "Số huy chương bạc theo quốc gia - Olympic Tokyo 2021",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# c) Sử dụng hàm barplot() để vẽ biểu đồ cột cho biến Silver.Medal.
barplot(games$Silver.Medal,
las = 2,
col = 'green',
main = "Số huy chương bạc theo quốc gia - Olympic Tokyo 2021",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
barplot(games$Silver.Medal,
names.arg = games$NOCCode,
las = 2,
col = 'green',
main = "Số huy chương bạc theo quốc gia - Olympic Tokyo 2021",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(games$Silver.Medal,
names.arg = games$NOCCode,
las = 2,
col = 'green',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# f) Cá nhân hóa biểu đồ:
#    - Sửa đổi phong cách của chữ
#    - Thay đổi tiêu đề trục
#    - Thêm bảng màu bạn thích
#    - Tùy chỉnh các phần tử khác để làm biểu đồ hấp dẫn hơn
barplot(silver10$Silver.Medal,
names.arg = silver10$Team.NOC,
las = 2,
col = heat.colors(10),
main = "🏆 TOP 10 Quốc Gia Giành Huy Chương Bạc 🥈",
xlab = "Các Quốc Gia Xuất Sắc",
ylab = "Tổng Số Huy Chương Bạc",
cex.names = 1.2,
cex.axis = 1.1,
cex.main = 1.8,
cex.lab = 1.3,
font.main = 3,
font.lab = 2,
border = "navy")
# c) Sử dụng hàm barplot() để vẽ biểu đồ cột cho biến Silver.Medal.
barplot(games$Silver.Medal,
las = 2,
col = 'green',
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
barplot(games$Silver.Medal,
names.arg = games$NOCCode,
las = 2,
col = 'green',
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(games$Silver.Medal,
names.arg = sliver10$NOCCode,
las = 2,
col = 'green',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(games$Silver.Medal,
names.arg = silver10$NOCCode,
las = 2,
col = 'green',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(games$Silver.Medal,
names.arg = silver10$NOCCode,
las = 2,
col = 'green',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(silver10$Silver.Medal,
names.arg = silver10$NOCCode,
las = 2,
col = 'green',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(silver10$Silver.Medal,
names.arg = silver10$NOCCode,
las = 2,
col = 'black',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# e) Thêm tiêu đề "Top 10 huy chương bạc".
barplot(silver10$Silver.Medal,
names.arg = silver10$NOCCode,
las = 2,
col = 'red',
main = "Top 10 huy chương bạc",
xlab = "Quốc gia",
ylab = "Số huy chương bạc")
# f) Cá nhân hóa biểu đồ:
#    - Sửa đổi phong cách của chữ
#    - Thay đổi tiêu đề trục
#    - Thêm bảng màu bạn thích
#    - Tùy chỉnh các phần tử khác để làm biểu đồ hấp dẫn hơn
barplot(silver10$Silver.Medal,
names.arg = silver10$Team.NOC,
las = 2,
col = heat.colors(10),
main = "🏆 TOP 10 Quốc Gia Giành Huy Chương Bạc 🥈",
xlab = "Các Quốc Gia Xuất Sắc",
ylab = "Tổng Số Huy Chương Bạc",
cex.names = 1.2,
cex.axis = 1.1,
cex.main = 1.8,
cex.lab = 1.3,
font.main = 3,
font.lab = 2,
border = "navy")
# f) Cá nhân hóa biểu đồ:
#    - Sửa đổi phong cách của chữ
#    - Thay đổi tiêu đề trục
#    - Thêm bảng màu bạn thích
#    - Tùy chỉnh các phần tử khác để làm biểu đồ hấp dẫn hơn
barplot(silver10$Silver.Medal,
names.arg = silver10$Team.NOC,
las = 2,
col = heat.colors(10),
main = "TOP 10 Quốc Gia Giành Huy Chương Bạc",
xlab = "Các Quốc Gia Xuất Sắc",
ylab = "Tổng Số Huy Chương Bạc",
cex.names = 1.2,
cex.axis = 1.1,
cex.main = 1.8,
cex.lab = 1.3,
font.main = 3,
font.lab = 2,
border = "navy")
# f) Cá nhân hóa biểu đồ:
#    - Sửa đổi phong cách của chữ
#    - Thay đổi tiêu đề trục
#    - Thêm bảng màu bạn thích
#    - Tùy chỉnh các phần tử khác để làm biểu đồ hấp dẫn hơn
barplot(silver10$Silver.Medal,
names.arg = silver10$Team.NOC,
las = 2,
col = heat.colors(10),
main = "TOP 10 Quốc Gia Giành Huy Chương Bạc",
xlab = "10 quốc gia",
ylab = "Tổng Số Huy Chương Bạc",
cex.names = 1.2,
cex.axis = 1.1,
cex.main = 1.8,
cex.lab = 1.3,
font.main = 3,
font.lab = 2,
border = "navy")
# Thêm đường lưới để dễ quan sát
grid(nx = NA, ny = NULL, col = "gray", lty = "dashed")
grid(nx = NA, ny = NULL, col = "black", lty = "dashed")
mtext("Nguồn: Olympic Tokyo 2021 Dataset", side = 1, line = 5, adj = 1, cex = 0.8, col = "blue")
mtext("Nguồn: Olympic Tokyo 2021 Dataset", side = 1, line = 5, adj = 1, cex = 0.8, col = "blue")
grid(nx = NA, ny = NULL, col = "black", lty = "dashed")
# Lưu biểu đồ thành tệp PNG và đặt tên theo mã số sinh viên của bạn.
dev.copy(png, "2286400009.png", width=1200, height=800)
dev.off()
# Lưu biểu đồ thành tệp PNG và đặt tên theo mã số sinh viên của bạn.
dev.copy(png, "2286400009.png", width=1200, height=800)
dev.off()
getwd()
getwd()
setwd("/Users/huy/Documents/phan_tich_va_truc_quan_du_lieu/Lab-01")
setwd("/Users/huy/Documents/phan_tich_va_truc_quan_du_lieu/Lab-01")
setwd('/Users/huy/Documents/phân tích và trực quan hoá dữ liệu/Lab-01')
ls
getwd()
grid(nx = NA, ny = NULL, col = "black", lty = "dashed")
# Lưu biểu đồ thành tệp PNG và đặt tên theo mã số sinh viên của bạn.
dev.copy(png, "2286400009.png", width=1200, height=800)
dev.off()
df <- read_csv('/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv')
df <- read_csv('/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv')
df <- read.csv('/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv')
head(df)
df <- read.csv("/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv",
sep = ",",
fileEncoding = "UTF-8",
stringsAsFactors = FALSE)
head(df)
missing_value <- sum(is.na(df))
missing_value
summary(df)
df <- read.csv("/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv",
sep = ",",
fileEncoding = "UTF-8",
stringsAsFactors = FALSE)
head(df)
summary(df)
str(df)
df <- read.csv("/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv",
sep = ",",
fileEncoding = "UTF-8",
stringsAsFactors = FALSE)
head(df)
str(df)
summary(df)
colSums(is.na(df))
df <- read.csv("/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv")
head(df)
str(df)
summary(df)
df$bmi[df$bmi == "N/A"] <- NA
sum(is.na(df$bmi))  # Đếm số lượng NA trong cột bmi
summary(df)
df$bmi[df$bmi == "N/A"] <- NA
summary(df$bmi)
df.isnull().sum()
df.isna().sum()
df <- read.csv("/Users/huy/Documents/doanthaytung/healthcare-dataset-stroke-data.csv")
str(df)
df$bmi <- as.numeric(df$bmi)
str(df)
summary(df)
a1 <- 12
a2 = 10
a3 <- a1+a2
a3
2+2
v1 = 1
v2 <-1
vector1 <- c(1,2,3)
vector2 <- c(1:10)
help(c)
help(rep)
vector1
vector2
vector3 <- rep(1:3, times = 2)
vector3
vector4 <- rep(1:3, each = 2)
vector4
help(c)
